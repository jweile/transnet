/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.on.mshri.transnet.algo;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QueryParseException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.CodeSource;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 *
 * @author jweile
 */
public class Sparql {
    
    private Map<String,String> queries = new HashMap<String,String>();
    
    private static Sparql instance;

    private Sparql() {
        read();
    }

    public static Sparql getInstance() {
        if (instance == null) {
            instance = new Sparql();
        }
        return instance;
    }

    private void read() {
        
        CodeSource src = Sparql.class.getProtectionDomain().getCodeSource();
        
        if (src != null && src.getLocation().toString().endsWith(".jar")) {
            
            URL jarURL = src.getLocation();
            System.err.println(jarURL);
            try {
                ZipFile jar = new ZipFile(new File(jarURL.toURI()));

                Enumeration<? extends ZipEntry> entries = jar.entries();
                while (entries.hasMoreElements()) {
                    
                    ZipEntry entry = entries.nextElement();
                    if (entry.getName().startsWith("sparql/") && 
                            entry.getName().endsWith(".sparql")) {
                        read(entry.getName(), jar.getInputStream(entry));
                    }
                    
                }

            } catch (IOException e) {
                throw new RuntimeException("Error reading from code source.", e);
            } catch (URISyntaxException e) {
                //shouldn't happen, as autogenerated
            }
            
        } else {
            
            File dir = new File("src/main/resources/sparql/");
            for (File file : dir.listFiles()) {
                try {
                    read(file.getAbsolutePath(), new FileInputStream(file));
                } catch (FileNotFoundException ex) {
                    //can't happen, unless it got deleted after the list() command.
                }
            }
        }
        
    }

    private void read(String path, InputStream inputStream) {
        
        String[] split = path.split("/");
        String filename = split[split.length-1];
        String name = filename.split("\\.")[0];
        
        try {
            
            String q = IO.getInstance().read(path, inputStream);
            queries.put(name, q);
            
        } catch (QueryParseException e) {
            throw new RuntimeException("Query "+path+" could not be parsed! ", e);
        } 
    }
    
    public Query get(String key) {
        
        String qString = queries.get(key);
        try {
            Query q = QueryFactory.create(qString);
            return q;
        } catch (QueryParseException e) {
            throw new RuntimeException("Query could not be parsed! ", e);
        }
    }
    
    public Query get(String key, String... values) {
        
        String qString = queries.get(key);
        try {
            Query q = QueryFactory.create(String.format(qString, (Object[])values));
            return q;
        } catch (QueryParseException e) {
            throw new RuntimeException("Query could not be parsed! ", e);
        }
    }
    
    
    
    
}
